function [gui,myui] = BLOCHUS_createPanelPulse(data,gui,myui)
%BLOCHUS_createPanelPulse creates "Pulse" settings panel
%
% Syntax:
%       [gui,myui] = BLOCHUS_createPanelBasic(data,gui,myui)
%
% Inputs:
%       data - figure data structure
%       gui - figure gui elements structure
%       myui - individual GUI settings structure
%
% Outputs:
%       gui
%       myui
%
% Example:
%       [gui,myui] = BLOCHUS_createPanelBasic(data,gui,myui)
%
% Other m-files required:
%       findjobj.m
%
% Subfunctions:
%       none
%
% MAT-files required:
%       none
%
% See also: BLOCHUS
% Author: Thomas Hiller
% email: thomas.hiller[at]leibniz-liag.de
% License: GNU GPLv3 (at end)

%------------- BEGIN CODE --------------

%% create all boxes
gui.panels.Pulse.VBox = uix.VBox('Parent', gui.panels.Pulse.main,...
    'Spacing',3,'Padding',3);

setCheck2 = uix.HBox('Parent',gui.panels.Pulse.VBox,'Spacing',3);
setPulseRDP = uix.HBox('Parent',gui.panels.Pulse.VBox,'Spacing',3);
setPulseType = uix.HBox('Parent',gui.panels.Pulse.VBox,'Spacing',3);
setPulseAxis = uix.HBox('Parent',gui.panels.Pulse.VBox,'Spacing',3);
setPulsePolarization = uix.HBox('Parent',gui.panels.Pulse.VBox,'Spacing',3);
setPulseB1Factor = uix.HBox('Parent',gui.panels.Pulse.VBox,'Spacing',3);
setPulseTtau = uix.HBox('Parent',gui.panels.Pulse.VBox,'Spacing',3);
setPulseDFmode = uix.HBox('Parent',gui.panels.Pulse.VBox,'Spacing',3);
setPulseDF = uix.HBox('Parent',gui.panels.Pulse.VBox,'Spacing',3);
setPulseImode = uix.HBox('Parent',gui.panels.Pulse.VBox,'Spacing',3);
setPulseI = uix.HBox('Parent',gui.panels.Pulse.VBox,'Spacing',3);
setPulseQ = uix.HBox('Parent',gui.panels.Pulse.VBox,'Spacing',3);
setPulseTwait = uix.HBox('Parent',gui.panels.Pulse.VBox,'Spacing',3);

%%
uix.Empty('Parent',setCheck2);
tstr = 'Activate pulse settings.';
gui.check_handles.Pulse = uicontrol('Style','Checkbox',...
    'Parent',setCheck2,...
    'String','Use Pulse',...
    'Value',0,...
    'Tag','checkPulse',...
    'ToolTipString',tstr,...
    'FontSize',myui.fontsize,...
    'UserData',struct('Tooltipstr',tstr),...
    'Callback',@onCheckPrePolPulse);
uix.Empty('Parent',setCheck2);
set(setCheck2,'Widths',[-1 100 -1]);

%% relaxation during pulse RDP switch
gui.text_handles.PulseRDP = uicontrol('Style','Text',...
    'Parent',setPulseRDP,...
    'String','Relax. during pulse',...
    'FontSize',myui.fontsize);
uix.Empty('Parent',setPulseRDP);
tstr = '<HTML>Switch on/off relaxation during pulse - RDP.<br>';
gui.check_handles.PulseRDP = uicontrol('Style','checkbox',...
    'Parent',setPulseRDP,...
    'String','RDP',...
    'Tag','PulseRDP',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'UserData',struct('Tooltipstr',tstr),...
    'Enable','off',...
    'Callback',@onCheckRDP);
set(setPulseRDP,'Widths',[140 10 -1]);

%% pulse type
gui.text_handles.PulseType = uicontrol('Style','Text',...
    'Parent',setPulseType,...
    'String','Pulse type',...
    'FontSize',myui.fontsize);
uix.Empty('Parent',setPulseType);
tstr = ['<HTML>Choose between different pulse types.<br><br>',...
    '<u>Available options:</u><br>',...
    '<b>',char(hex2dec('3C0')),'/2</b> ',char(hex2dec('3C0')),...
    '/2 excitation pulse. B1 or ',char(hex2dec('3C4')),' get adjusted.<br>',...
    '<b>',char(hex2dec('3C0')),'</b> ',char(hex2dec('3C0')),...
    ' excitation pulse. B1 or ',char(hex2dec('3C4')),' get adjusted.<br>',...
    '<b>free</b> freely adjustable excitation pulse.<br>',...
    '<b>adiabatic HP</b> adiabatic half passage pulse.<br>',...
    '<b>MIDI OR</b> MIDI style (discrete) on-resonant pulse.<br>',...
    '<b>MDID AP</b> MIDI style (discrete) adiabatic pulse.<br><br>',...
    '<u>Default value:</u><br>',...
    '<b>',char(hex2dec('3C0')),'/2</b><br>'];
gui.popup_handles.PulseType = uicontrol('Style','Popup',...
    'Parent',setPulseType,...
    'String',{[char(hex2dec('3C0')),'/2'],char(hex2dec('3C0')),'free',...
    'AHP','MIDI OR','MIDI AHP'},...
    'Value',1,...
    'Tag','PulseType',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'UserData',struct('Tooltipstr',tstr),...
    'Enable','off',...
    'Callback',@onPopupPulseType);
set(setPulseType,'Widths',[140 10 -1]);

%% pulse axis
gui.text_handles.PulseAxis = uicontrol('Style','Text',...
    'Parent',setPulseAxis,...
    'String','Pulse axis',...
    'FontSize',myui.fontsize);
uix.Empty('Parent',setPulseAxis);
tstr = ['<HTML>Choose between different pulse axis.<br>',...
    'Note that in the rotating frame of reference, <b>M</b> flips',...
    ' according to the right-hand-rule.<br><br>',...
    '<u>Available options:</u><br>',...
    '<b>+x</b> - Lab standard (OR pulse is flipped into the -Im part (-y))<br>',...
    '<b>-x</b><br>',...
    '<b>+y</b> - MRS standard (OR pulse is flipped into the Re part (+x))<br>',...
    '<b>-y</b><br><br>',...
    '<u>Default value:</u><br>',...
    '<b>+x</b><br>'];
gui.popup_handles.PulseAxis = uicontrol('Style','Popup',...
    'Parent',setPulseAxis,...
    'String',{'+x (Lab std)','-x','+y (MRS std)','-y'},...
    'Value',1,...
    'Tag','PulseAxis',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'UserData',struct('Tooltipstr',tstr),...
    'Enable','off',...
    'Callback',@onPopupPulseAxis);
set(setPulseAxis,'Widths',[140 10 -1]);

%% pulse polarization
gui.text_handles.PulsePolarization = uicontrol('Style','Text',...
    'Parent',setPulsePolarization,...
    'String','Pulse polarization',...
    'FontSize',myui.fontsize);
uix.Empty('Parent',setPulsePolarization);
tstr = ['<HTML>Choose between different pulse polarization.<br><br>',...
    '<u>Available options:</u><br>',...
    '<b>circular</b> x and y components.<br>',...
    '<b>linear</b> only x component.<br><br>',...
    '<u>Default value:</u><br>',...
    '<b>circular</b><br>'];
gui.popup_handles.PulsePolarization = uicontrol('Style','Popup',...
    'Parent',setPulsePolarization,...
    'String',{'circular','linear'},...
    'Value',1,...
    'Tag','PulsePolarization',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'UserData',struct('Tooltipstr',tstr),...
    'Enable','off',...
    'Callback',@onPopupPulsePolarization);
set(setPulsePolarization,'Widths',[140 10 -1]);

%% pulse amplitude B1 factor in units of B0
gui.text_handles.PulseB1Factor = uicontrol('Style','Text',...
    'Parent',setPulseB1Factor,...
    'String','B1 factor [B0]',...
    'FontSize',myui.fontsize);
uix.Empty('Parent',setPulseB1Factor);
tstr = '<HTML>Pulse amplitude factor B1 in units of <b>B</b><sub>0</sub>.<br>';
gui.edit_handles.PulseB1Factor = uicontrol('Style','Edit',...
    'Parent',setPulseB1Factor,...
    'String',num2str(data.init.PulseB1Factor(1)),...
    'Tag','pulse_B1Factor',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'UserData',struct('Tooltipstr',tstr,'defaults',data.init.PulseB1Factor),...
    'Enable','off',...
    'Callback',@onEditValue);
set(setPulseB1Factor,'Widths',[140 10 -1]);

%% pulse time T_tau
gui.text_handles.PulseTtau = uicontrol('Style','Text',....
    'Parent',setPulseTtau,...
    'String',['Pulse length ',char(hex2dec('3C4')),' [ms]'],...
    'FontSize',myui.fontsize);
uix.Empty('Parent',setPulseTtau);
tstr = '<HTML>Pulse length &tau in [ms].<br>';
gui.edit_handles.PulseTtau = uicontrol('Style','Edit',...
    'Parent',setPulseTtau,...
    'String',num2str(data.init.PulseTtau(1)),...
    'Tag','pulse_Ttau',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'UserData',struct('Tooltipstr',tstr,'defaults',data.init.PulseTtau),...
    'Enable','off',...    
    'Callback',@onEditValue);
set(setPulseTtau,'Widths',[140 10 -1]);

%% frequency modulation
gui.text_handles.PulseDFmode = uicontrol('Style','Text',...
    'Parent',setPulseDFmode,...
    'String',['Frequency modulation ',char(hex2dec('394')),'f'],...
    'FontSize',myui.fontsize);
uix.Empty('Parent',setPulseDFmode);
tstr = ['<HTML>Choose between different pulse types.<br><br>',...
    '<u>Available options:</u><br>',...
    '<b>linear</b> linear sweep from start freq. to end freq.<br>',...
    '<b>tanh MIDI</b> tanh sweep from start freq. to end freq. (shape can be adjusted).<br>',...
    '<b>tanh GMR</b> tanh sweep from start freq. to end freq..<br>',...
    '<b>exp</b> exp sweep from start freq. to end freq..<br><br>',...
    '<u>Default value:</u><br>',...
    '<b>linear</b><br>'];
gui.popup_handles.PulseDFmode = uicontrol('Style','Popup',...
    'Parent',setPulseDFmode,...
    'String',{'linear','tanh MIDI','tanh GMR','exp'},...
    'Value',1,...
    'Tag','PulseDFmode',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'UserData',struct('Tooltipstr',tstr),...
    'Enable','off',...
    'Callback',@onPopupPulseDFmode);
set(setPulseDFmode,'Widths',[140 10 -1]);

%% off resonance frequency settings
gui.text_handles.PulseDF = uicontrol('Style','Text',...
    'Parent',setPulseDF,...
    'String','start [Hz] end [Hz] A B',...
    'FontSize',myui.fontsize);
uix.Empty('Parent',setPulseDF);
tstr = ['<HTML>Start of frequency offset ',char(hex2dec('394')),'f in [Hz].'];
gui.edit_handles.PulseDFstart = uicontrol('Style','Edit',...
    'Parent',setPulseDF,...
    'String',num2str(data.init.PulseDFstart(1)),...
    'Tag','pulse_DFstart',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'UserData',struct('Tooltipstr',tstr,'defaults',data.init.PulseDFstart),...
    'Enable','off',...    
    'Callback',@onEditValue);
tstr = ['<HTML>End of frequency offset ',char(hex2dec('394')),'f in [Hz].'];
gui.edit_handles.PulseDFend = uicontrol('Style','Edit',...
    'Parent',setPulseDF,....
    'String',num2str(data.init.PulseDFend(1)),...
    'Tag','pulse_DFend',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...    
    'UserData',struct('Tooltipstr',tstr,'defaults',data.init.PulseDFend),...
    'Enable','off',...
    'Callback',@onEditValue);
tstr = 'Slope parameter A of tanh curve.';
gui.edit_handles.PulseDFA = uicontrol('Style','Edit',...
    'Parent',setPulseDF,...
    'String',num2str(data.init.PulseDFA(1)),...
    'Tag','pulse_DFA',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'UserData',struct('Tooltipstr',tstr,'defaults',data.init.PulseDFA),...
    'Enable','off',...
    'Callback',@onEditValue);
tstr = 'Upsetting parameter B of tanh curve.';
gui.edit_handles.PulseDFB = uicontrol('Style','Edit',...
    'Parent',setPulseDF,...
    'String',num2str(data.init.PulseDFB(1)),...
    'Tag','pulse_DFB',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'UserData',struct('Tooltipstr',tstr,'defaults',data.init.PulseDFB),...
    'Enable','off',...
    'Callback',@onEditValue);
set(setPulseDF,'Widths',[140 10 -1.5 -1.5 -1 -1]);

%% current modulation
gui.text_handles.PulseImode = uicontrol('Style','Text',...
    'Parent',setPulseImode,...
    'String','Current modulation I',...
    'FontSize',myui.fontsize);
uix.Empty('Parent',setPulseImode);
tstr = ['<HTML>Choose between different pulse types.<br><br>',...
    '<u>Available options:</u><br>',...
    '<b>linear</b> linear sweep from start I to end I.<br>',...
    '<b>tanh MIDI</b> tanh sweep from start I to end I (shape can be adjusted).<br>',...
    '<b>tanh GMR</b> tanh sweep from start I to end I.<br>',...
    '<b>exp</b> tanh sweep from start I to end I.<br><br>',...
    '<u>Default value:</u><br>',...
    '<b>linear</b><br>'];
gui.popup_handles.PulseImode = uicontrol('Style','Popup',...
    'Parent',setPulseImode,...
    'String',{'linear','tanh MIDI','tanh GMR','exp'},...
    'Value',1,...
    'Tag','PulseDFmode',....
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'UserData',struct('Tooltipstr',tstr),...
    'Enable','off',...
    'Callback',@onPopupPulseImode);
set(setPulseImode,'Widths',[140 10 -1]);

%% current settings
gui.text_handles.PulseI = uicontrol('Style','Text',...
    'Parent',setPulseI,...
    'String','start [A] end [A] A B',...
    'FontSize',myui.fontsize);
uix.Empty('Parent',setPulseI);
tstr = 'Start of current sweep in [A].';
gui.edit_handles.PulseIstart = uicontrol('Style','Edit',...
    'Parent',setPulseI,...
    'String',num2str(data.init.PulseIstart(1)),...
    'Tag','pulse_Istart',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'UserData',struct('Tooltipstr',tstr,'defaults',data.init.PulseIstart),...
    'Enable','off',...    
    'Callback',@onEditValue);
tstr = 'End of current sweep in [A].';
gui.edit_handles.PulseIend = uicontrol('Style','Edit',...
    'Parent',setPulseI,...
    'String',num2str(data.init.PulseIend(1)),...
    'Tag','pulse_Iend',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'UserData',struct('Tooltipstr',tstr,'defaults',data.init.PulseIend),...
    'Enable','off',...    
    'Callback',@onEditValue);
tstr = 'Slope parameter A of tanh curve.';
gui.edit_handles.PulseIA = uicontrol('Style','Edit',...
    'Parent',setPulseI,...
    'String',num2str(data.init.PulseIA(1)),...
    'Tag','pulse_IA',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'UserData',struct('Tooltipstr',tstr,'defaults',data.init.PulseIA),...
    'Enable','off',...    
    'Callback',@onEditValue);
tstr = 'Upsetting parameter B of tanh curve.';
gui.edit_handles.PulseIB = uicontrol('Style','Edit',...
    'Parent',setPulseI,...
    'String',num2str(data.init.PulseIB(1)),...
    'Tag','pulse_IB',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'UserData',struct('Tooltipstr',tstr,'defaults',data.init.PulseIB),...
    'Enable','off',...
    'Callback',@onEditValue);
set(setPulseI,'Widths',[140 10 -1.5 -1.5 -1 -1]);

%% quality factor tuning
gui.text_handles.PulseQ = uicontrol('Style','Text',...
    'Parent',setPulseQ,...
    'String','quality factor tuning Q | df',...
    'FontSize',myui.fontsize);
uix.Empty('Parent',setPulseQ);
tstr = 'Activate coil tuning via quality factor.';
gui.check_handles.PulseQ = uicontrol('Style','checkbox',...
    'Parent',setPulseQ,...
    'String','on / off',...
    'Tag','PulseQ',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'UserData',struct('Tooltipstr',tstr),...
    'Enable','off',...
    'Callback',@onCheckPulseQ);
tstr = 'Quality factor Q.';
gui.edit_handles.PulseQ = uicontrol('Style','Edit',...
    'Parent',setPulseQ,...
    'String',num2str(data.init.PulseQ(1)),...
    'Tag','pulse_Q',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'UserData',struct('Tooltipstr',tstr,'defaults',data.init.PulseQ),...
    'Enable','off',...
    'Callback',@onEditValue);
tstr = 'Quality factor offset [Hz]';
gui.edit_handles.PulseQdf = uicontrol('Style','Edit',...
    'Parent',setPulseQ,...
    'String',num2str(data.init.PulseQdf(1)),...
    'Tag','pulse_Qdf',...
    'TooltipString',tstr,...
    'FontSize',myui.fontsize,...
    'UserData',struct('Tooltipstr',tstr,'defaults',data.init.PulseQdf),...
    'Enable','off',...
    'Callback',@onEditValue);
set(setPulseQ,'Widths',[140 10 -1.5 -1 -1]);

%% wait time T_wait between end of PrePol and Pulse
gui.text_handles.PulseTwait = uicontrol('Style','Text',...
    'Parent',setPulseTwait,...
    'String','Wait time [ms]',...
    'FontSize',myui.fontsize);
uix.Empty('Parent',setPulseTwait);
tstr = 'Wait time in [ms] between end of pre-polarization switch off and start of pulse.';
gui.edit_handles.PulseTwait = uicontrol('Style','Edit',...
    'Parent',setPulseTwait,...
    'String',num2str(data.init.PulseTwait(1)),...
    'Tag','pulse_Twait',...
    'TooltipString',tstr,...
    'BackgroundColor',myui.color.wait,...
    'FontSize',myui.fontsize,...
    'UserData',struct('Tooltipstr',tstr,'defaults',data.init.PulseTwait),...  
    'Enable','off',...
    'Callback',@onEditValue);
set(setPulseTwait,'Widths',[140 10 -1]);

%% Java Hack to adjust the text fields vertical alignment
jh = findjobj(gui.text_handles.PulseRDP);
jh.setVerticalAlignment(javax.swing.JLabel.CENTER)
jh = findjobj(gui.text_handles.PulseType);
jh.setVerticalAlignment(javax.swing.JLabel.CENTER)
jh = findjobj(gui.text_handles.PulseAxis);
jh.setVerticalAlignment(javax.swing.JLabel.CENTER)
jh = findjobj(gui.text_handles.PulseB1Factor);
jh.setVerticalAlignment(javax.swing.JLabel.CENTER)
jh = findjobj(gui.text_handles.PulseTtau);
jh.setVerticalAlignment(javax.swing.JLabel.CENTER)
jh = findjobj(gui.text_handles.PulseImode);
jh.setVerticalAlignment(javax.swing.JLabel.CENTER)
jh = findjobj(gui.text_handles.PulseI);
jh.setVerticalAlignment(javax.swing.JLabel.CENTER)
jh = findjobj(gui.text_handles.PulseDFmode);
jh.setVerticalAlignment(javax.swing.JLabel.CENTER)
jh = findjobj(gui.text_handles.PulseDF);
jh.setVerticalAlignment(javax.swing.JLabel.CENTER)
jh = findjobj(gui.text_handles.PulseQ);
jh.setVerticalAlignment(javax.swing.JLabel.CENTER)
jh = findjobj(gui.text_handles.PulseTwait);
jh.setVerticalAlignment(javax.swing.JLabel.CENTER)

return

%------------- END OF CODE --------------

%% License:
% GNU GPLv3
%
% BLOCHUS
% Copyright (C) 2019 Thomas Hiller
%
% This program is free software: you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation, either version 3 of the License, or
% (at your option) any later version.
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program.  If not, see <https://www.gnu.org/licenses/>.